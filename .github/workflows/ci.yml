name: CI
# Copied from https://github.com/Toblerity/Fiona/blob/master/.github/workflows/ci_linux.yml

on: [push, pull_request]

jobs:
  lint:
    name: Run the linters
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.python-version }}-v1-${{ hashFiles('**/setup.cfg') }}-${{ hashFiles('**/tox.ini') }}
          restore-keys: |
            ${{ matrix.python-version }}-v1-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade tox
      - name: Test with tox
        run: |
          tox -e lint
          tox -e manifest
          tox -e changelog -- --draft


  build:
    name: Python ${{ matrix.python }} / GDAL ${{ matrix.GDALVERSION }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test all supported gdal minor versions (except latest stable) with one python version
          - {
              python: 3.7,
              GDALVERSION: "3.1.4",
              allow_failure: "false",
            }
          - {
              python: 3.7,
              GDALVERSION: "3.2.3",
              allow_failure: "false",
            }
          - {
              python: 3.8,
              GDALVERSION: "3.3.3",
              allow_failure: "false",
            }
          - {
              python: 3.9,
              GDALVERSION: "3.4.3",
              allow_failure: "false",
            }
          - {
              python: "3.10",
              GDALVERSION: "3.5.3",
              allow_failure: "false",
            }
          - {
              python: "3.11",
              GDALVERSION: "3.6.0",
              allow_failure: "false",
            }

          # Test GDAL master
          - {
              python: "3.11",
              GDALVERSION: "master",
              allow_failure: "true",
            }


    env:
      GDALVERSION: ${{ matrix.GDALVERSION }}
      GDALINST: ${{ github.workspace }}/gdalinstall
      GDALBUILD: ${{ github.workspace }}/gdalbuild

      # Emulate travis
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      TRAVIS_OS_NAME: "linux"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Set env variables
        run: |

          # Additional env variables
          echo "GDAL_DATA=$GDALINST/gdal-$GDALVERSION/share/gdal" >> $GITHUB_ENV

          # Add PATH
          echo "$GDALINST/gdal-$GDALVERSION/bin" >> $GITHUB_PATH
          echo "$GDALINST/proj-$PROJVERSION/bin" >> $GITHUB_PATH

          echo "cat \$GITHUB_ENV"
          cat $GITHUB_ENV
          echo ""
          echo "cat \$GITHUB_PATH"
          cat $GITHUB_PATH

      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install libatlas-base-dev libcurl4-openssl-dev libgeos-dev libfreexl-dev libzstd-dev libspatialite-dev libproj-dev

          # Unlike travis, packages from non default repositories are installed.
          # While default repositories e.g. bionic/universe or bionic/main) tend to keep packages at the same API / ABI level,
          # this is not guaranteed with other repositories.
          # The following command creates a list of these packages, which is used as key for the GDAL cache
          # The repositories of packages can be identified in the the output of `sudo apt-get install`
          apt list --installed | grep 'libgeos-dev\|libxml2-dev' > $GITHUB_WORKSPACE/apt_list
          cat $GITHUB_WORKSPACE/apt_list

      - name: Cache GDAL binaries
        uses: actions/cache@v3
        with:
          path: gdalinstall
          key: ${{ runner.os }}-gdal-${{ matrix.GDALVERSION }}-${{ hashFiles('**/apt_list') }}-${{ hashFiles('scripts/travis_gdal_install.sh') }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Build GDAL
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: |
          chmod +x scripts/travis_gdal_install.sh && ./scripts/travis_gdal_install.sh
          gdal-config --version

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -e .[test]
          python -m pip install GDAL-${{ matrix.GDALVERSION }}

      - name: Print Environment
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: |
          echo "python -m pip freeze"
          python -m pip freeze

      - name: pytest
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: |
          GDAL_ENABLE_DEPRECATED_DRIVER_GTM=YES python -m pytest -m "not wheel or gdal" --cov fiona --cov-report term-missing

      - name: Coveralls
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: coveralls || echo "!! intermittent coveralls failure"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
